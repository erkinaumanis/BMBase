#!/bin/sh
#
prog=bmupdate
usage="$prog host"
#
#	Create updated database files using all the raw data in $HOME/BM/<host>/raw.
#	Files are updated in $HOME/BM/db


case $# in
1)	host="$1";	shift;;
*)	echo "usage: $usage" 1>&2
	exit 1
esac

BMDIR=$HOME/BM
DIR=$BMDIR/$host

if [ ! -d $DIR/raw ]
then
	echo "$prog: `hostname -s`: dir '$DIR/raw' missing, aborted" 1>&2
	exit 2
fi

(cd $DIR
	mkdir -p db 2>/dev/null

	# why /dev/null?  so grep will include the file names, even if only one file	
	grep . /dev/null raw/2*	|	# all the readings files, with their paths
	sed 's;^.*/;;'	|	# remove leading path elements
	sed 's/:/ /'	|	# no colon after the file name, which is time stamp
	awk -v OFS='	' '
	BEGIN {	missingstring = "GAP" }

	{	newstamp = $1
		n = split(newstamp, fields, "_")
		newdate = fields[1]
		newtime = fields[2]
		n = split(date, fields, "_")
		olddate = fields[1]
		oldtime = fields[2]
		datamissing = (date != "") && (newdate != olddate)
	}
	$2 ~ /RX|TX/	{
		date = $1
		type = $2
		pkts = $4
		bytes = $6
		fn = "db/" type
		if (0 && datamissing)
			print missingstring >fn
		print	date, pkts, bytes >fn
		next
	}  
	
	/^2.*/ {
		date=$1		# note: the date shifts our raw fields on to the right
		name = toupper($2)
		type = $3
		if (type != "scale" && type != "sensor") {
			print "bad type: $0" >"/dev/stderr"
			next
		}
		ver = $4
		batt = $5
		temp = $6
		hum = $7
		data = $8
		wl = $10
		wr = $11
		# (there is more: weight, and data in the device)
		sub(/%/, "", batt)
		sub(/F/, "", temp)
		sub(/%/, "", hum)
		fn = "db/" name
		if (0 && datamissing)
			print missingstring >fn
		if (type == "scale") {
			if (NF < 10) {
				print "scale lacks weights: $0" >"/dev/stderr"
				next
			}
			w = 2.0*(wl + wr)	# scale factor
			print date, batt, temp, hum, w >fn
		} else {
			print date, batt, temp, hum >fn
		}
		next
	}'

	# we may have multiple lines for TX and RX entries for each reading.
	# go through and pick the largest one.  Actually, we only write the
	# number of packets and bytes since the previous entry.

	for i in db/RX db/TX
	do
		awk <$i -v OFS='	' '

		function flush() {
			if (last == "")
				return;
			nbytes = bytes-lastbytes
			if (lastbytes && nbytes > 0 && pkts >= lastpckts) {
				logbytes = log(nbytes)/log(10)
				print last, pkts-lastpckts, nbytes
			}
			lastpckts = pkts
			lastbytes = bytes
		}

		BEGIN {	pkts = bytes = 0
			lastpckts = lastbytes = 0
		}
		$1 != last {
			flush()
			pkts = bytes = 0
		}
		{	last = $1
			if ($2 > pkts)
				pkts = $2
			if ($3 > bytes)
				bytes = $3
		}
		END {
			flush()
		}' >$i.new && mv $i.new $i || exit 99
	done

	# find earliest and latest date, so all our plots will be aligned

	files=`echo db/* | egrep ':|X'`
	echo "$files" >/tmp/$host.files

	cat $files |
	grep -v GAP |
	awk -v FS='	' '
	BEGIN {	first = "" }
	
	first == "" {	first = last = $1; next }
	$1 < first {	first = $1 }
	$1 > last {	last = $1 }

	END {	print "\"" first "\":\"" last "\""}
	' >xrange
)

bmreportall 2>&1 >>/tmp/bmreportall
