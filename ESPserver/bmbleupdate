#!/bin/sh
#
prog=bmbleupdate
usage="usage: $prog"
#
#	Process our local logs into device data files

BLEDIR=$HOME/BLE
BLELOGS=$BLEDIR/logs

BMDIR=$HOME/BM

TMPDIR=${TMPDIR:-/var/tmp}
WRKDIR=${WRKDIR:-${TMPDIR}/${prog}}
mkdir -p $WRKDIR        || exit 100
rm -rf $WRKDIR/*


RPT=$BLEDIR/`ls -t $BLEDIR | tail -1`

(cd $BMDIR
	for apiary in *
	do	# fetch device names
		if [ -f $apiary/Names ]
		then
			grep -v '^[ 	]*$' $apiary/Names |
			awk -v FS='	' -v OFS='	' -v apiary="$apiary" '
			{	dev = $1
				devname = $2
				print $1, apiary, $2
			}'
		fi
	done
) >$WRKDIR/alldevs

awk '{print $1}' $WRKDIR/alldevs |
	sort |
	uniq -d >$WRKDIR/moved

if [ -s $WRKDIR/moved ]
then
	echo "$prog: devices moved: "
	cat $WRKDIR/moved
fi 1>&2

#cat $WRKDIR/alldevs | grep 06:09:16:42

cat $BLELOGS/* |
tr -d '\r' |
awk -v FS='	' -v OFS='	' -v devsfn=$WRKDIR/alldevs '  
BEGIN { while ((getline <devsfn) > 0) {
		device = toupper($1)
		ap = $2
		name = $3
		apiary_count[ap] ++
		dev_name[device] = $3
		dev_apiary[device] = ap
        }
	datestamp = ""
}

function v(p) {	# convert byte string to integer
	x = 0
	s = substr(md, p*2+1, n*2)
	for (j=0; j<2; j++)
		x = x * 16 + index("0123456789ABCDEF", substr(s, j+1, 1)) - 1
	return x
}

# {	print }	# debug, show what we are processing

/^$/ {		# end of report
#	print "end of report"
	next
}

/^Report/ {	# beginning of report
	probing_MAC = $2
	count_found = $3
	sub(/ .*$/, "", count_found)
	SSID = $4
	RSSI = $5
	print "Report " wifiip, probing_MAC, SSID " @ " RSSI, count_found
	next
}

/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun)/ {	# new connection
	humandate = $1
	n = split(humandate, f, " ")
	if (n != 6) {
		print "bad date stamp: " datestamp >"/dev/stderr"
		next
	}
	year = f[6]
	si = index("JanFebMarAprMayJunJulAugSepOctNovDec", f[2])
	if (si == 0) {
		print "bad month: " f[2]
		next
	}
	mi = "0" ((si - 1) / length("Jan")) + 1
	mon = substr(mi, length(mi)-1, 2)
	d = "0" f[3]
	day = substr(d, length(d)-1, 2)
	hms = f[4]
	gsub(/:/, "", hms)
	datestamp = year mon day "_" hms

	if (NF > 2) {
		UTCsecs = $2
		wifiip = $3
	} else {
		UTCsecs = 0
		wifiip = $2
	}
	next
}

/^06:09:16:4[1-4]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]/ {
	dev = toupper($1)
	if (dev in dev_name)
		name = dev_name[dev]
	else
		name = dev

	rt = $2		# response time, in ms
	reported_name = $3
	md = toupper($4)
	txpower = $5
	rssi = $6
	if (substr(md, 1, 4) != "8D02") {
		print "bad manufacturer: " md
		next
	}
	model = v(2)
	scale = (model == 43)
	minordev = v(3)
	majdev = v(4)
	battery = v(6)
	rt = v(10) * 256 + v(9)
	F = ((rt*1.0) / 65536*165.0 - 40.0)*(9.0/5.0) + 32.0
	F = int(10.0*F)/10.0	# round to a tenth
	humidity = v(16)

	if (scale) {
		wl = (v(13) * 256.0 + v(12) - 32767.0)/100.0
		wr = (v(15) * 256.0 + v(14) - 32767.0)/100.0
		w = int(2.0*(wl + wr)*10.0) / 10.0
		data = battery "% " F "F "  humidity "% " w "#"
	} else {
		data = battery "% " F "F "  humidity "%"
	}

	print datestamp, UTCsecs, dev_apiary[dev], dev, name, rssi, model, F, humidity, data
}

/^..:..:..:..:..:../ {	# some other device we do not care about
	next
}

{	print "unexpected line: " $0
}
' > $WRKDIR/results 

APIARIES="lnfhives" # labhives danhives wshives

for ap in $APIARIES
do
	mkdir -p $BMDIR/$ap/espdb 2>/dev/null

	(cd $BMDIR/$ap/espdb
		grep "	$ap	" $WRKDIR/results |
		grep -v Report |
		awk -v FS='	' -v OFS='	' '
		$7 == 43 {	# scales only
			date = $1
			UTCdate = $2
			apiary = $3
			devMAC = $4
			name = $5
			rssi = $6
			model = $7
			temp = $8
			hum = $9
			data = $10
			n = split(data, f, " ")
			batt = f[1]
			w = f[4]
			sub(/#$/, "", w)
			fn=devMAC
			print date, batt, temp, hum, w >fn
		}'
	)
done

exit 0

for i in $APIARIES
do
	echo
	echo "$prog: $i signal averages:"

	grep "$i" $WRKDIR/results |
	grep -v Report |
	awk -v FS='	' -v OFS='	' '
	{	name = $5
		rssi = $6
		count[name]++
		sum[name] += rssi
	}
	END {	for (name in count) {
			print name, count[name], sum[name]/count[name]
		}
	}' | sort -k3,3rn
done

for i in $APIARIES
do
	echo
	echo "$prog: $i hive weights:"

	grep "$i" $WRKDIR/results |
	grep -v Report |
	awk -v FS='	' -v OFS='	' '
	$7 == 43 {	# scales only
		date = $1
		UTCdate = $2
		apiary = $3
		devMAC = $4
		name = $5
		rssi = $6
		model = $7
		data = $8
		n = split(data, f, " ")
		w = f[4]
		sub(/#$/, "", w)
		print date, name, devMAC, w
	}' | sort -k2,2 -k1,1n
done
